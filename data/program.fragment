#version 330
#extension GL_NV_shadow_samplers_cube : enable
#extension GL_ARB_explicit_uniform_location : enable

// Lights

layout(location = 1) uniform int computeLight;
// Color de la luz ambiente
layout(location = 2) uniform vec3 ambient;
layout(location = 3) uniform float ambientIntensity;

// Brillo del material
layout(location = 4) uniform int shininess;
layout(location = 5) uniform float alpha;

// CameraPosition
layout(location = 6) uniform vec3 cameraPosition;

// Texture
layout(location = 7) uniform int hasTexture;
layout(location = 8) uniform int isCubeMap;
layout(location = 9) uniform sampler2D colorTexture;
layout(location = 10) uniform samplerCube cubeTexture;
layout(location = 11) uniform sampler2D normalTexture;
layout(location = 12) uniform int computeReflection;
layout(location = 13) uniform int computeRefraction;
layout(location = 14) uniform float refractCoef;

#define MAX_NUMBER_OF_LIGHTS 8
struct LightSource
{
    int IsActive;
    int Type;
    vec3 Position;
    vec4 Direction;
    float ConstantAttenuation;
    float LinearAttenuation;
    float QuadraticAttenuation;
    vec3 Color;
    // Para spotLights cos(phi)
    float Cutoff;
    float AmbientContribution;
    float DifuseContribution;
    float SpecularContribution;
};
layout(location = 15) uniform LightSource Lights[MAX_NUMBER_OF_LIGHTS];


// Input
in vec4 fColor;
in vec2 fTexture;
in vec4 fNormal;
in vec4 fPos;

// Output
out vec4 FragColor;

float CalculateAttenuation(float distance, float const_atten, float lin_atten, float quad_atten)
{
    return 1.0f / (const_atten + lin_atten * distance + quad_atten * (distance * distance)); 
}

void main() {

    vec3 fTextCube = fPos.xyz;
    
    if(computeReflection == 1)
    {
        vec3 I = vec3(normalize(fPos.xyz - cameraPosition));
        fTextCube = reflect(I, vec3(normalize(fNormal)));
    }
    else if(computeRefraction == 1)
    {
        vec3 I = vec3(normalize(fPos.xyz - cameraPosition));
        fTextCube = refract(I, normalize(fNormal.xyz), refractCoef);
    }

    vec4 baseColor = fColor;
    
    if(hasTexture == 1)
    {
        if(isCubeMap == 1)
        {
            baseColor = vec4(textureCube(cubeTexture, fTextCube).rgb, 1.f);   
        }
        else
        {
            baseColor = texture2D(colorTexture, fTexture);   
        }
    }

    if (computeLight == 1)
    {
        vec3 totalLight = vec3(0.f);
        for (int i=0;i<MAX_NUMBER_OF_LIGHTS;i++)
        {
            if(Lights[i].IsActive ==  0)
                continue;
            vec3 L = vec3(1.f);

            // Directional
            if (Lights[i].Type == 0)
            {
                L = normalize(-Lights[i].Direction.xyz);
            }
            // Point light
            else if (Lights[i].Type == 1)
            {
                L = normalize(Lights[i].Position-fPos.xyz);
            }
            // Spot light
            else if (Lights[i].Type == 2)
            {
                // Vector pointing from light to framgent position
                L = normalize(Lights[i].Position-fPos.xyz);
                // Calculate the cos of the angle between the light direction and L
                float cos_theta = max(dot(normalize(-Lights[i].Direction.xyz), L), 0.0);
                // If the fragment does not received light from the focal light, give only ambient
                if (cos_theta < Lights[i].Cutoff)
                {
                    vec3 light = ambient * Lights[i].AmbientContribution * ambientIntensity * Lights[i].Color;
                    totalLight += light;
                    continue;
                }
            }

            float distance = length(Lights[i].Position-fPos.xyz);
            float attenuation = Lights[i].ConstantAttenuation;
            attenuation += Lights[i].LinearAttenuation * distance;
            attenuation += Lights[i].QuadraticAttenuation * distance * distance;
            attenuation = 1.0 / (attenuation);

            vec3 N = normalize(fNormal.xyz);

            // Componente difusa
            float diffuse = max(dot(L, N), 0.f);

            // Componente especular
            // Vector reflexion de la luz (espejo)
            vec3 R = normalize(reflect(L, N));

            vec3 EYE = normalize(fPos.xyz - cameraPosition);
            float specular = pow(max(dot(R, EYE), 0.f), shininess);

            vec3 light = ambient * Lights[i].AmbientContribution * ambientIntensity;
            light += diffuse * Lights[i].DifuseContribution;
            light += specular * Lights[i].SpecularContribution;
            light *= attenuation;
            light *= Lights[i].Color;
            totalLight += light;
        }
        FragColor = vec4(totalLight, 1.0f) * baseColor;
        FragColor.a = FragColor.a * 1.f;
    }
    else
    {
        FragColor = baseColor;
        FragColor.a = FragColor.a * 1.f;
    }

}