#version 330

uniform mat4 P;
uniform mat4 V;
uniform mat4 M;
uniform mat4 DepthVP;

uniform int computeShadows;

attribute vec4 vPos;
attribute vec4 vColor;
attribute vec4 vNormal;
attribute vec4 vTangent;
attribute vec2 vTexture;

out vec4 fColor;
out vec4 fNormal;
out vec4 fPos;
out vec2 fTextCoord;
out mat3 TBN;
out vec4 fShadowCoord;

void main() {
    fColor = vColor;
    fPos = M * vPos;
    fTextCoord = vTexture;

    gl_Position = P * V * fPos;

    mat4 invTM = inverse(transpose(M));
    fNormal = invTM *vNormal;
    vec3 tan = normalize((invTM * vTangent).xyz);
    vec3 bitan = cross(tan.xyz, normalize(fNormal.xyz));
    TBN = transpose(mat3(tan, bitan, normalize(fNormal.xyz)));

    if(computeShadows == 1)
    {
        fShadowCoord = DepthVP * M * vPos;
    }
}
