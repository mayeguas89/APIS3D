#version 330

uniform mat4 P;
uniform mat4 V;
uniform mat4 M;
uniform mat4 DepthVP;

#define MAX_BONES_IN_MESH 64
uniform mat4 animationMatrices[MAX_BONES_IN_MESH];

uniform int computeShadows;
uniform int hasAnimation;

attribute vec4 vPos;
attribute vec4 vColor;
attribute vec4 vNormal;
attribute vec4 vTangent;
attribute vec2 vTexture;
attribute vec4 vBoneIndexes;
attribute vec4 vBoneWeights;

out vec4 fColor;
out vec4 fNormal;
out vec4 fPos;
out vec2 fTextCoord;
out mat3 TBN;
out vec4 fShadowCoord;

void main() {
    fColor = vColor;
    vec4 finalPos = vPos;

    if(hasAnimation == 1)
    {
        mat4 boneTransform = mat4(1.f);
        for(int i = 0; i < 4; i++)
        {
            int boneIndex = int(vBoneIndexes[i]);
            if(boneIndex != -1)
            {
                boneTransform+=animationMatrices[boneIndex]*vBoneWeights[i];
            }
        }
        finalPos = boneTransform*vPos;
    }
    
    fPos = M * finalPos;
    
    fTextCoord = vTexture;

    gl_Position = P * V * fPos;

    mat4 invTM = inverse(transpose(M));
    fNormal = invTM *vNormal;
    vec3 tan = normalize((invTM * vTangent).xyz);
    vec3 bitan = cross(tan.xyz, normalize(fNormal.xyz));
    TBN = transpose(mat3(tan, bitan, normalize(fNormal.xyz)));

    if(computeShadows == 1)
    {
        fShadowCoord = DepthVP * M * finalPos;
    }
}
